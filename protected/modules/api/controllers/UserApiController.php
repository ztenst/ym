<?php
/**
 * 二手房用户中心
 * User: jt
 * Date: 2016/10/8 9:13
 */
use Qiniu\Auth;
Yii::import('api.controllers.ResoldWapApiController');
class UserApiController extends ResoldWapApiController{

    public $uid ;

    public $user;

    public $status;

    public $source;

    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
    }

    public function beforeAction($action)
    {
        if(Yii::app()->uc->user->getisGuest()){
            $this->returnError('您尚未登录');
            $this->afterAction($action);
        }
        $this->uid = Yii::app()->uc->user->id;
        $this->user = Yii::app()->uc->user;
        $check_arr = array_flip(Yii::app()->params['checkStatus']);
        if(empty(SM::resoldConfig()->resoldUserMode())){
            $this->status = $check_arr['正常'];
        }else{
            $this->status = $check_arr['审核中'];
        }
        $source_arr = array_flip(Yii::app()->params['source']);
        $this->source = $source_arr['个人'];
        return true;
    }

    public function actions()
    {
        $alias = 'api.controllers.userApi.';
        return array(
            //浏览纪录
            'myhistory'=>$alias.'common.HistoryAction',

            //二手房出售管理
            'myesfpublish'=>$alias.'esf.sell.PublishAction', //我要卖房 编辑卖房
            'myesflist'=>$alias.'esf.sell.ListAction', //房源列表
            'myesfrefresh'=>array(
                'class'=>$alias.'common.RefreshAction',
                'model'=>'ResoldEsfExt'
            ), //刷新房源
            'myesfitem'=>$alias.'esf.sell.ItemAction', //获取单个二手房
            'myesfdelete'=>array(
                'class'=>$alias.'common.DeleteAction',
                'model'=>'ResoldEsfExt',
            ), //删除房源
            'myesfrp'=>array(
                'class'=>$alias.'common.RepublishAction',
                'model'=>'ResoldEsfExt'
            ), //重新发布
            'myesfrs'=>array(
                'class'=>$alias.'common.RestoreAction',
                'model'=>'ResoldEsfExt'
            ), //恢复

            //二手房求购管理
            'myesfbuy'=>$alias.'esf.buy.EditAction',
            'myesfbuylist'=>$alias.'esf.buy.ListAction',
            'myesfbuyitem'=>$alias.'esf.buy.ItemAction',
            'myesfbuydelete'=>array(
                'class'=>$alias.'common.DeleteAction',
                'model'=>'ResoldQgExt'
            ),
            'myesfbuyrefresh'=>array(
                'class'=>$alias.'common.RefreshAction',
                'model'=>'ResoldQgExt'
            ), //刷新房源
            //租房管理出租
            'myzf'=>$alias.'zf.rent.EditAction',
            'myzflist'=>$alias.'zf.rent.ListAction',
            'myzfitem'=>$alias.'zf.rent.ItemAction',
            'myzfrefresh'=>array(
                'class'=>$alias.'common.RefreshAction',
                'model'=>'ResoldZfExt'
            ),
            'myzfdelete'=>array(
                'class'=>$alias.'common.DeleteAction',
                'model'=>'ResoldZfExt'
            ),
            'myzfrp'=>array(
                'class'=>$alias.'common.RepublishAction',
                'model'=>'ResoldZfExt'
            ), //重新发布
            'myzfrs'=>array(
                'class'=>$alias.'common.RestoreAction',
                'model'=>'ResoldZfExt'
            ), //恢复

            //租房管理求租
            'myqz'=>$alias.'zf.forRent.EditAction',
            'myqzlist'=>$alias.'zf.forRent.ListAction',
            'myqzitem'=>$alias.'zf.forRent.ItemAction',
            'myqzdelete'=>array(
                'class'=>$alias.'common.DeleteAction',
                'model'=>'ResoldQzExt'
            ),
            'myqzrefresh'=>array(
                'class'=>$alias.'common.RefreshAction',
                'model'=>'ResoldQzExt'
            ), //刷新房源
            'myqzrp'=>array(
                'class'=>$alias.'common.RepublishAction',
                'model'=>'ResoldQzExt'
            ), //重新发布
            'myqzrs'=>array(
                'class'=>$alias.'common.RestoreAction',
                'model'=>'ResoldQzExt'
            ), 
            'myesfbuyrp'=>array(
                'class'=>$alias.'common.RepublishAction',
                'model'=>'ResoldQgExt'
            ), //重新发布
            'myesfbuyrs'=>array(
                'class'=>$alias.'common.RestoreAction',
                'model'=>'ResoldQgExt'
            ), 
            //收藏管理
            'mycollectlist'=>$alias.'collect.ListAction', //收藏列表
            'mycollectdelete'=>$alias.'collect.DeleteAction', //删除收藏
            'mycollectclear'=>$alias.'collect.ClearAction', //清空收藏
            'mycollectadd'=>$alias.'collect.AddAction', //清空收藏
            'mycollectcheck'=>$alias.'collect.CheckAction' //清空收藏
        );
    }

    public function filters()
    {
        return array(
            'postData + myesfpublish,myesfbuy,myzf,myqz',
        );
    }

    public function filterPostData($chain){
        // 敏感词过滤
        if(SM::resoldSensitiveConfig()->resoldUseSensitiveWordFilter()) {
            $filterFile = SM::resoldSensitiveConfig()->resoldSensitive();
            if ($filterFile) {
                $words = preg_split("/,|，/", $filterFile);
                if (Yii::app()->request->isPostRequest) {
                    $postData = json_encode($_POST['data']['content'].$_POST['data']['title'], JSON_UNESCAPED_UNICODE);
                    foreach ($words as $word) {
                        if (strpos($postData, $word)) {
                            $this->returnError("数据中存在敏感词汇({$word})");
                            $this->afterAction($chain);
                        }
                    }
                }
            }
        }
        if(isset($_POST['data']['content']) && !empty($_POST['data']['content'])){
            $_POST['data']['content'] = $this->cleanXss($_POST['data']['content']); //过滤xxs攻击
            $_POST['data']['content'] = Tools::filterEmoji($_POST['data']['content']); //过滤表情
        }
        if(!isset($_POST['data']) || empty($_POST['data']) || !is_array($_POST['data'])){
            $this->returnError('参数错误');
            $this->afterAction($chain);
        }
        // 黑名单限制
        if(isset($_POST['data']['phone']) && $phone = $_POST['data']['phone'])
        {
            if(ResoldBlackExt::model()->count(['condition'=>'phone=:phone','params'=>[':phone'=>$phone]])){
                $this->returnError('此号码发布违规信息，不能发布信息');
                $this->afterAction($chain);
            }
            if(ResoldStaffPhoneExt::model()->getIsExist($phone)){
                $this->returnError('此号码是中介，不能用个人账户不发信息');
                $this->afterAction($chain);
            }
            if(!isset($_POST['data']['id']) || empty($_POST['data']['id'])) {
                $userPubNum = SM::resoldConfig()->resoldPersonalSaleNum();
                $criteria = new CDbCriteria(array(
                    'condition'=>'phone=:phone',
                    'params'=>array(':phone'=>$phone)
                ));
                $salingEsfNum = ResoldEsfExt::model()->normal()->count($criteria);
                $salingZfNum = ResoldZfExt::model()->normal()->count($criteria);
                $salingQgNum = ResoldQgExt::model()->undeleted()->count($criteria);
                $salingQzNum = ResoldQzExt::model()->undeleted()->count($criteria);
                $totalCanSaleNum = $userPubNum - $salingEsfNum - $salingZfNum - $salingQgNum - $salingQzNum;
                if ($totalCanSaleNum <= 0) {
                    $this->returnError('此号码已发布' . $userPubNum . '条不能再发布了；联系客服 开通中介套餐可以发布更多哦！');
                    $this->afterAction($chain);
                }
            }
        }
        foreach ($_POST['data'] as $key => $value) {
            $value == 'NaN' && $_POST['data'][$key] = 0;
        }
        $chain->run();
    }

    /**
     * 根据ID和UID获取以下数据
     * @param $model
     * resold_esf
     * resold_zf
     * resold_qg
     * resold_qz
     */
    public function findResoldById($model,$id){
       $resold = $model::model()->undeleted()->findByPk($id,'uid=:uid',array(':uid'=>$this->uid));
       // var_dump($this->uid);
       return $resold;
    }

    public function checkPhone($phone=0,$code=0,$oldphone=0){
        if(empty($phone))
            return $this->returnError('手机号不能为空');
        if(!$oldphone)
        {
            if( ($this->user->phone && $this->user->phone != $phone) || (!$this->user->phone)) {
                if (!$code)
                    return $this->returnError('验证码不能为空');
                elseif (ResoldSmsExt::findCodeByMobile($phone) != $code)
                    return $this->returnError('验证码错误或已过期');
            }
        }
        elseif($phone != $oldphone)
        {
            if (!$code)
                return $this->returnError('验证码不能为空');
            elseif (ResoldSmsExt::findCodeByMobile($phone) != $code)
                return $this->returnError('验证码错误或已过期');
        }   
        return true ;
    }


    public function actionUptoken(){
        $auth = new Auth(Yii::app()->file->accessKey,Yii::app()->file->secretKey);
        $policy = array(
            'mimeLimit'=>'image/*',
            'fsizeLimit'=>10000000
        );
        $token = $auth->uploadToken(Yii::app()->file->bucket,null,3600,$policy);
        echo CJSON::encode( array('uptoken'=>$token));
        Yii::app()->end();
    }

    public function actionKeyName(){
        return $this->frame['data'] = date('Y').'/'.date('md').'/'.str_replace('.', '', microtime(1)) . rand(100000,999999);
    }
}